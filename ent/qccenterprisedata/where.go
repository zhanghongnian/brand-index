// Code generated by entc, DO NOT EDIT.

package qccenterprisedata

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/zhanghongnian/brand-index/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// RegisterStatus applies equality check predicate on the "register_status" field. It's identical to RegisterStatusEQ.
func RegisterStatus(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterStatus), v))
	})
}

// LegalPerson applies equality check predicate on the "legal_person" field. It's identical to LegalPersonEQ.
func LegalPerson(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLegalPerson), v))
	})
}

// RegisteredCapital applies equality check predicate on the "registered_capital" field. It's identical to RegisteredCapitalEQ.
func RegisteredCapital(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisteredCapital), v))
	})
}

// SetUpDate applies equality check predicate on the "set_up_date" field. It's identical to SetUpDateEQ.
func SetUpDate(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSetUpDate), v))
	})
}

// VerifyDate applies equality check predicate on the "verify_date" field. It's identical to VerifyDateEQ.
func VerifyDate(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerifyDate), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// County applies equality check predicate on the "county" field. It's identical to CountyEQ.
func County(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounty), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// OtherPhones applies equality check predicate on the "other_phones" field. It's identical to OtherPhonesEQ.
func OtherPhones(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherPhones), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// OtherEmails applies equality check predicate on the "other_emails" field. It's identical to OtherEmailsEQ.
func OtherEmails(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherEmails), v))
	})
}

// UnifiedSocialCreditCode applies equality check predicate on the "unified_social_credit_code" field. It's identical to UnifiedSocialCreditCodeEQ.
func UnifiedSocialCreditCode(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// TaxpayerIdentificationNumber applies equality check predicate on the "taxpayer_identification_number" field. It's identical to TaxpayerIdentificationNumberEQ.
func TaxpayerIdentificationNumber(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// RegistrationNumber applies equality check predicate on the "registration_number" field. It's identical to RegistrationNumberEQ.
func RegistrationNumber(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationNumber), v))
	})
}

// OrganizationCode applies equality check predicate on the "organization_code" field. It's identical to OrganizationCodeEQ.
func OrganizationCode(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizationCode), v))
	})
}

// InsurancePersonNums applies equality check predicate on the "insurance_person_nums" field. It's identical to InsurancePersonNumsEQ.
func InsurancePersonNums(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsurancePersonNums), v))
	})
}

// EnterpriseType applies equality check predicate on the "enterprise_type" field. It's identical to EnterpriseTypeEQ.
func EnterpriseType(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnterpriseType), v))
	})
}

// IndustryInvolved applies equality check predicate on the "industry_involved" field. It's identical to IndustryInvolvedEQ.
func IndustryInvolved(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndustryInvolved), v))
	})
}

// FormerName applies equality check predicate on the "former_name" field. It's identical to FormerNameEQ.
func FormerName(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormerName), v))
	})
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWebsite), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// BusinessScope applies equality check predicate on the "business_scope" field. It's identical to BusinessScopeEQ.
func BusinessScope(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessScope), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// RegisterStatusEQ applies the EQ predicate on the "register_status" field.
func RegisterStatusEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusNEQ applies the NEQ predicate on the "register_status" field.
func RegisterStatusNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusIn applies the In predicate on the "register_status" field.
func RegisterStatusIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisterStatus), v...))
	})
}

// RegisterStatusNotIn applies the NotIn predicate on the "register_status" field.
func RegisterStatusNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisterStatus), v...))
	})
}

// RegisterStatusGT applies the GT predicate on the "register_status" field.
func RegisterStatusGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusGTE applies the GTE predicate on the "register_status" field.
func RegisterStatusGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusLT applies the LT predicate on the "register_status" field.
func RegisterStatusLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusLTE applies the LTE predicate on the "register_status" field.
func RegisterStatusLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusContains applies the Contains predicate on the "register_status" field.
func RegisterStatusContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusHasPrefix applies the HasPrefix predicate on the "register_status" field.
func RegisterStatusHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusHasSuffix applies the HasSuffix predicate on the "register_status" field.
func RegisterStatusHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusEqualFold applies the EqualFold predicate on the "register_status" field.
func RegisterStatusEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegisterStatus), v))
	})
}

// RegisterStatusContainsFold applies the ContainsFold predicate on the "register_status" field.
func RegisterStatusContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegisterStatus), v))
	})
}

// LegalPersonEQ applies the EQ predicate on the "legal_person" field.
func LegalPersonEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonNEQ applies the NEQ predicate on the "legal_person" field.
func LegalPersonNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonIn applies the In predicate on the "legal_person" field.
func LegalPersonIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLegalPerson), v...))
	})
}

// LegalPersonNotIn applies the NotIn predicate on the "legal_person" field.
func LegalPersonNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLegalPerson), v...))
	})
}

// LegalPersonGT applies the GT predicate on the "legal_person" field.
func LegalPersonGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonGTE applies the GTE predicate on the "legal_person" field.
func LegalPersonGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonLT applies the LT predicate on the "legal_person" field.
func LegalPersonLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonLTE applies the LTE predicate on the "legal_person" field.
func LegalPersonLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonContains applies the Contains predicate on the "legal_person" field.
func LegalPersonContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonHasPrefix applies the HasPrefix predicate on the "legal_person" field.
func LegalPersonHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonHasSuffix applies the HasSuffix predicate on the "legal_person" field.
func LegalPersonHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonEqualFold applies the EqualFold predicate on the "legal_person" field.
func LegalPersonEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLegalPerson), v))
	})
}

// LegalPersonContainsFold applies the ContainsFold predicate on the "legal_person" field.
func LegalPersonContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLegalPerson), v))
	})
}

// RegisteredCapitalEQ applies the EQ predicate on the "registered_capital" field.
func RegisteredCapitalEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalNEQ applies the NEQ predicate on the "registered_capital" field.
func RegisteredCapitalNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalIn applies the In predicate on the "registered_capital" field.
func RegisteredCapitalIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisteredCapital), v...))
	})
}

// RegisteredCapitalNotIn applies the NotIn predicate on the "registered_capital" field.
func RegisteredCapitalNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisteredCapital), v...))
	})
}

// RegisteredCapitalGT applies the GT predicate on the "registered_capital" field.
func RegisteredCapitalGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalGTE applies the GTE predicate on the "registered_capital" field.
func RegisteredCapitalGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalLT applies the LT predicate on the "registered_capital" field.
func RegisteredCapitalLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalLTE applies the LTE predicate on the "registered_capital" field.
func RegisteredCapitalLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalContains applies the Contains predicate on the "registered_capital" field.
func RegisteredCapitalContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalHasPrefix applies the HasPrefix predicate on the "registered_capital" field.
func RegisteredCapitalHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalHasSuffix applies the HasSuffix predicate on the "registered_capital" field.
func RegisteredCapitalHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalEqualFold applies the EqualFold predicate on the "registered_capital" field.
func RegisteredCapitalEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegisteredCapital), v))
	})
}

// RegisteredCapitalContainsFold applies the ContainsFold predicate on the "registered_capital" field.
func RegisteredCapitalContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegisteredCapital), v))
	})
}

// SetUpDateEQ applies the EQ predicate on the "set_up_date" field.
func SetUpDateEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateNEQ applies the NEQ predicate on the "set_up_date" field.
func SetUpDateNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateIn applies the In predicate on the "set_up_date" field.
func SetUpDateIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSetUpDate), v...))
	})
}

// SetUpDateNotIn applies the NotIn predicate on the "set_up_date" field.
func SetUpDateNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSetUpDate), v...))
	})
}

// SetUpDateGT applies the GT predicate on the "set_up_date" field.
func SetUpDateGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateGTE applies the GTE predicate on the "set_up_date" field.
func SetUpDateGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateLT applies the LT predicate on the "set_up_date" field.
func SetUpDateLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateLTE applies the LTE predicate on the "set_up_date" field.
func SetUpDateLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateContains applies the Contains predicate on the "set_up_date" field.
func SetUpDateContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateHasPrefix applies the HasPrefix predicate on the "set_up_date" field.
func SetUpDateHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateHasSuffix applies the HasSuffix predicate on the "set_up_date" field.
func SetUpDateHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateEqualFold applies the EqualFold predicate on the "set_up_date" field.
func SetUpDateEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSetUpDate), v))
	})
}

// SetUpDateContainsFold applies the ContainsFold predicate on the "set_up_date" field.
func SetUpDateContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSetUpDate), v))
	})
}

// VerifyDateEQ applies the EQ predicate on the "verify_date" field.
func VerifyDateEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateNEQ applies the NEQ predicate on the "verify_date" field.
func VerifyDateNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateIn applies the In predicate on the "verify_date" field.
func VerifyDateIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVerifyDate), v...))
	})
}

// VerifyDateNotIn applies the NotIn predicate on the "verify_date" field.
func VerifyDateNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVerifyDate), v...))
	})
}

// VerifyDateGT applies the GT predicate on the "verify_date" field.
func VerifyDateGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateGTE applies the GTE predicate on the "verify_date" field.
func VerifyDateGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateLT applies the LT predicate on the "verify_date" field.
func VerifyDateLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateLTE applies the LTE predicate on the "verify_date" field.
func VerifyDateLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateContains applies the Contains predicate on the "verify_date" field.
func VerifyDateContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateHasPrefix applies the HasPrefix predicate on the "verify_date" field.
func VerifyDateHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateHasSuffix applies the HasSuffix predicate on the "verify_date" field.
func VerifyDateHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateEqualFold applies the EqualFold predicate on the "verify_date" field.
func VerifyDateEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVerifyDate), v))
	})
}

// VerifyDateContainsFold applies the ContainsFold predicate on the "verify_date" field.
func VerifyDateContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVerifyDate), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// CountyEQ applies the EQ predicate on the "county" field.
func CountyEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounty), v))
	})
}

// CountyNEQ applies the NEQ predicate on the "county" field.
func CountyNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCounty), v))
	})
}

// CountyIn applies the In predicate on the "county" field.
func CountyIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCounty), v...))
	})
}

// CountyNotIn applies the NotIn predicate on the "county" field.
func CountyNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCounty), v...))
	})
}

// CountyGT applies the GT predicate on the "county" field.
func CountyGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCounty), v))
	})
}

// CountyGTE applies the GTE predicate on the "county" field.
func CountyGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCounty), v))
	})
}

// CountyLT applies the LT predicate on the "county" field.
func CountyLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCounty), v))
	})
}

// CountyLTE applies the LTE predicate on the "county" field.
func CountyLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCounty), v))
	})
}

// CountyContains applies the Contains predicate on the "county" field.
func CountyContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCounty), v))
	})
}

// CountyHasPrefix applies the HasPrefix predicate on the "county" field.
func CountyHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCounty), v))
	})
}

// CountyHasSuffix applies the HasSuffix predicate on the "county" field.
func CountyHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCounty), v))
	})
}

// CountyEqualFold applies the EqualFold predicate on the "county" field.
func CountyEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCounty), v))
	})
}

// CountyContainsFold applies the ContainsFold predicate on the "county" field.
func CountyContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCounty), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// OtherPhonesEQ applies the EQ predicate on the "other_phones" field.
func OtherPhonesEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesNEQ applies the NEQ predicate on the "other_phones" field.
func OtherPhonesNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesIn applies the In predicate on the "other_phones" field.
func OtherPhonesIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOtherPhones), v...))
	})
}

// OtherPhonesNotIn applies the NotIn predicate on the "other_phones" field.
func OtherPhonesNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOtherPhones), v...))
	})
}

// OtherPhonesGT applies the GT predicate on the "other_phones" field.
func OtherPhonesGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesGTE applies the GTE predicate on the "other_phones" field.
func OtherPhonesGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesLT applies the LT predicate on the "other_phones" field.
func OtherPhonesLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesLTE applies the LTE predicate on the "other_phones" field.
func OtherPhonesLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesContains applies the Contains predicate on the "other_phones" field.
func OtherPhonesContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesHasPrefix applies the HasPrefix predicate on the "other_phones" field.
func OtherPhonesHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesHasSuffix applies the HasSuffix predicate on the "other_phones" field.
func OtherPhonesHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesEqualFold applies the EqualFold predicate on the "other_phones" field.
func OtherPhonesEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherPhones), v))
	})
}

// OtherPhonesContainsFold applies the ContainsFold predicate on the "other_phones" field.
func OtherPhonesContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherPhones), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// OtherEmailsEQ applies the EQ predicate on the "other_emails" field.
func OtherEmailsEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsNEQ applies the NEQ predicate on the "other_emails" field.
func OtherEmailsNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsIn applies the In predicate on the "other_emails" field.
func OtherEmailsIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOtherEmails), v...))
	})
}

// OtherEmailsNotIn applies the NotIn predicate on the "other_emails" field.
func OtherEmailsNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOtherEmails), v...))
	})
}

// OtherEmailsGT applies the GT predicate on the "other_emails" field.
func OtherEmailsGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsGTE applies the GTE predicate on the "other_emails" field.
func OtherEmailsGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsLT applies the LT predicate on the "other_emails" field.
func OtherEmailsLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsLTE applies the LTE predicate on the "other_emails" field.
func OtherEmailsLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsContains applies the Contains predicate on the "other_emails" field.
func OtherEmailsContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsHasPrefix applies the HasPrefix predicate on the "other_emails" field.
func OtherEmailsHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsHasSuffix applies the HasSuffix predicate on the "other_emails" field.
func OtherEmailsHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsEqualFold applies the EqualFold predicate on the "other_emails" field.
func OtherEmailsEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherEmails), v))
	})
}

// OtherEmailsContainsFold applies the ContainsFold predicate on the "other_emails" field.
func OtherEmailsContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherEmails), v))
	})
}

// UnifiedSocialCreditCodeEQ applies the EQ predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeNEQ applies the NEQ predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeIn applies the In predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnifiedSocialCreditCode), v...))
	})
}

// UnifiedSocialCreditCodeNotIn applies the NotIn predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnifiedSocialCreditCode), v...))
	})
}

// UnifiedSocialCreditCodeGT applies the GT predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeGTE applies the GTE predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeLT applies the LT predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeLTE applies the LTE predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeContains applies the Contains predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeHasPrefix applies the HasPrefix predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeHasSuffix applies the HasSuffix predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeEqualFold applies the EqualFold predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// UnifiedSocialCreditCodeContainsFold applies the ContainsFold predicate on the "unified_social_credit_code" field.
func UnifiedSocialCreditCodeContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnifiedSocialCreditCode), v))
	})
}

// TaxpayerIdentificationNumberEQ applies the EQ predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberNEQ applies the NEQ predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberIn applies the In predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxpayerIdentificationNumber), v...))
	})
}

// TaxpayerIdentificationNumberNotIn applies the NotIn predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxpayerIdentificationNumber), v...))
	})
}

// TaxpayerIdentificationNumberGT applies the GT predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberGTE applies the GTE predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberLT applies the LT predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberLTE applies the LTE predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberContains applies the Contains predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberHasPrefix applies the HasPrefix predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberHasSuffix applies the HasSuffix predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberEqualFold applies the EqualFold predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// TaxpayerIdentificationNumberContainsFold applies the ContainsFold predicate on the "taxpayer_identification_number" field.
func TaxpayerIdentificationNumberContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxpayerIdentificationNumber), v))
	})
}

// RegistrationNumberEQ applies the EQ predicate on the "registration_number" field.
func RegistrationNumberEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberNEQ applies the NEQ predicate on the "registration_number" field.
func RegistrationNumberNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberIn applies the In predicate on the "registration_number" field.
func RegistrationNumberIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegistrationNumber), v...))
	})
}

// RegistrationNumberNotIn applies the NotIn predicate on the "registration_number" field.
func RegistrationNumberNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegistrationNumber), v...))
	})
}

// RegistrationNumberGT applies the GT predicate on the "registration_number" field.
func RegistrationNumberGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberGTE applies the GTE predicate on the "registration_number" field.
func RegistrationNumberGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberLT applies the LT predicate on the "registration_number" field.
func RegistrationNumberLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberLTE applies the LTE predicate on the "registration_number" field.
func RegistrationNumberLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberContains applies the Contains predicate on the "registration_number" field.
func RegistrationNumberContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberHasPrefix applies the HasPrefix predicate on the "registration_number" field.
func RegistrationNumberHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberHasSuffix applies the HasSuffix predicate on the "registration_number" field.
func RegistrationNumberHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberEqualFold applies the EqualFold predicate on the "registration_number" field.
func RegistrationNumberEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegistrationNumber), v))
	})
}

// RegistrationNumberContainsFold applies the ContainsFold predicate on the "registration_number" field.
func RegistrationNumberContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegistrationNumber), v))
	})
}

// OrganizationCodeEQ applies the EQ predicate on the "organization_code" field.
func OrganizationCodeEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeNEQ applies the NEQ predicate on the "organization_code" field.
func OrganizationCodeNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeIn applies the In predicate on the "organization_code" field.
func OrganizationCodeIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganizationCode), v...))
	})
}

// OrganizationCodeNotIn applies the NotIn predicate on the "organization_code" field.
func OrganizationCodeNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganizationCode), v...))
	})
}

// OrganizationCodeGT applies the GT predicate on the "organization_code" field.
func OrganizationCodeGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeGTE applies the GTE predicate on the "organization_code" field.
func OrganizationCodeGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeLT applies the LT predicate on the "organization_code" field.
func OrganizationCodeLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeLTE applies the LTE predicate on the "organization_code" field.
func OrganizationCodeLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeContains applies the Contains predicate on the "organization_code" field.
func OrganizationCodeContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeHasPrefix applies the HasPrefix predicate on the "organization_code" field.
func OrganizationCodeHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeHasSuffix applies the HasSuffix predicate on the "organization_code" field.
func OrganizationCodeHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeEqualFold applies the EqualFold predicate on the "organization_code" field.
func OrganizationCodeEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeContainsFold applies the ContainsFold predicate on the "organization_code" field.
func OrganizationCodeContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrganizationCode), v))
	})
}

// InsurancePersonNumsEQ applies the EQ predicate on the "insurance_person_nums" field.
func InsurancePersonNumsEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsNEQ applies the NEQ predicate on the "insurance_person_nums" field.
func InsurancePersonNumsNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsIn applies the In predicate on the "insurance_person_nums" field.
func InsurancePersonNumsIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInsurancePersonNums), v...))
	})
}

// InsurancePersonNumsNotIn applies the NotIn predicate on the "insurance_person_nums" field.
func InsurancePersonNumsNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInsurancePersonNums), v...))
	})
}

// InsurancePersonNumsGT applies the GT predicate on the "insurance_person_nums" field.
func InsurancePersonNumsGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsGTE applies the GTE predicate on the "insurance_person_nums" field.
func InsurancePersonNumsGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsLT applies the LT predicate on the "insurance_person_nums" field.
func InsurancePersonNumsLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsLTE applies the LTE predicate on the "insurance_person_nums" field.
func InsurancePersonNumsLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsContains applies the Contains predicate on the "insurance_person_nums" field.
func InsurancePersonNumsContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsHasPrefix applies the HasPrefix predicate on the "insurance_person_nums" field.
func InsurancePersonNumsHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsHasSuffix applies the HasSuffix predicate on the "insurance_person_nums" field.
func InsurancePersonNumsHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsEqualFold applies the EqualFold predicate on the "insurance_person_nums" field.
func InsurancePersonNumsEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInsurancePersonNums), v))
	})
}

// InsurancePersonNumsContainsFold applies the ContainsFold predicate on the "insurance_person_nums" field.
func InsurancePersonNumsContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInsurancePersonNums), v))
	})
}

// EnterpriseTypeEQ applies the EQ predicate on the "enterprise_type" field.
func EnterpriseTypeEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeNEQ applies the NEQ predicate on the "enterprise_type" field.
func EnterpriseTypeNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeIn applies the In predicate on the "enterprise_type" field.
func EnterpriseTypeIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnterpriseType), v...))
	})
}

// EnterpriseTypeNotIn applies the NotIn predicate on the "enterprise_type" field.
func EnterpriseTypeNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnterpriseType), v...))
	})
}

// EnterpriseTypeGT applies the GT predicate on the "enterprise_type" field.
func EnterpriseTypeGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeGTE applies the GTE predicate on the "enterprise_type" field.
func EnterpriseTypeGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeLT applies the LT predicate on the "enterprise_type" field.
func EnterpriseTypeLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeLTE applies the LTE predicate on the "enterprise_type" field.
func EnterpriseTypeLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeContains applies the Contains predicate on the "enterprise_type" field.
func EnterpriseTypeContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeHasPrefix applies the HasPrefix predicate on the "enterprise_type" field.
func EnterpriseTypeHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeHasSuffix applies the HasSuffix predicate on the "enterprise_type" field.
func EnterpriseTypeHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeEqualFold applies the EqualFold predicate on the "enterprise_type" field.
func EnterpriseTypeEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnterpriseType), v))
	})
}

// EnterpriseTypeContainsFold applies the ContainsFold predicate on the "enterprise_type" field.
func EnterpriseTypeContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnterpriseType), v))
	})
}

// IndustryInvolvedEQ applies the EQ predicate on the "industry_involved" field.
func IndustryInvolvedEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedNEQ applies the NEQ predicate on the "industry_involved" field.
func IndustryInvolvedNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedIn applies the In predicate on the "industry_involved" field.
func IndustryInvolvedIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIndustryInvolved), v...))
	})
}

// IndustryInvolvedNotIn applies the NotIn predicate on the "industry_involved" field.
func IndustryInvolvedNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIndustryInvolved), v...))
	})
}

// IndustryInvolvedGT applies the GT predicate on the "industry_involved" field.
func IndustryInvolvedGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedGTE applies the GTE predicate on the "industry_involved" field.
func IndustryInvolvedGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedLT applies the LT predicate on the "industry_involved" field.
func IndustryInvolvedLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedLTE applies the LTE predicate on the "industry_involved" field.
func IndustryInvolvedLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedContains applies the Contains predicate on the "industry_involved" field.
func IndustryInvolvedContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedHasPrefix applies the HasPrefix predicate on the "industry_involved" field.
func IndustryInvolvedHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedHasSuffix applies the HasSuffix predicate on the "industry_involved" field.
func IndustryInvolvedHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedEqualFold applies the EqualFold predicate on the "industry_involved" field.
func IndustryInvolvedEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIndustryInvolved), v))
	})
}

// IndustryInvolvedContainsFold applies the ContainsFold predicate on the "industry_involved" field.
func IndustryInvolvedContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIndustryInvolved), v))
	})
}

// FormerNameEQ applies the EQ predicate on the "former_name" field.
func FormerNameEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormerName), v))
	})
}

// FormerNameNEQ applies the NEQ predicate on the "former_name" field.
func FormerNameNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormerName), v))
	})
}

// FormerNameIn applies the In predicate on the "former_name" field.
func FormerNameIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormerName), v...))
	})
}

// FormerNameNotIn applies the NotIn predicate on the "former_name" field.
func FormerNameNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormerName), v...))
	})
}

// FormerNameGT applies the GT predicate on the "former_name" field.
func FormerNameGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormerName), v))
	})
}

// FormerNameGTE applies the GTE predicate on the "former_name" field.
func FormerNameGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormerName), v))
	})
}

// FormerNameLT applies the LT predicate on the "former_name" field.
func FormerNameLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormerName), v))
	})
}

// FormerNameLTE applies the LTE predicate on the "former_name" field.
func FormerNameLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormerName), v))
	})
}

// FormerNameContains applies the Contains predicate on the "former_name" field.
func FormerNameContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFormerName), v))
	})
}

// FormerNameHasPrefix applies the HasPrefix predicate on the "former_name" field.
func FormerNameHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFormerName), v))
	})
}

// FormerNameHasSuffix applies the HasSuffix predicate on the "former_name" field.
func FormerNameHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFormerName), v))
	})
}

// FormerNameEqualFold applies the EqualFold predicate on the "former_name" field.
func FormerNameEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFormerName), v))
	})
}

// FormerNameContainsFold applies the ContainsFold predicate on the "former_name" field.
func FormerNameContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFormerName), v))
	})
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWebsite), v))
	})
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWebsite), v))
	})
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWebsite), v...))
	})
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWebsite), v...))
	})
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWebsite), v))
	})
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWebsite), v))
	})
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWebsite), v))
	})
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWebsite), v))
	})
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWebsite), v))
	})
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWebsite), v))
	})
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWebsite), v))
	})
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWebsite), v))
	})
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWebsite), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// BusinessScopeEQ applies the EQ predicate on the "business_scope" field.
func BusinessScopeEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeNEQ applies the NEQ predicate on the "business_scope" field.
func BusinessScopeNEQ(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeIn applies the In predicate on the "business_scope" field.
func BusinessScopeIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessScope), v...))
	})
}

// BusinessScopeNotIn applies the NotIn predicate on the "business_scope" field.
func BusinessScopeNotIn(vs ...string) predicate.QccEnterpriseData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessScope), v...))
	})
}

// BusinessScopeGT applies the GT predicate on the "business_scope" field.
func BusinessScopeGT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeGTE applies the GTE predicate on the "business_scope" field.
func BusinessScopeGTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeLT applies the LT predicate on the "business_scope" field.
func BusinessScopeLT(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeLTE applies the LTE predicate on the "business_scope" field.
func BusinessScopeLTE(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeContains applies the Contains predicate on the "business_scope" field.
func BusinessScopeContains(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeHasPrefix applies the HasPrefix predicate on the "business_scope" field.
func BusinessScopeHasPrefix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeHasSuffix applies the HasSuffix predicate on the "business_scope" field.
func BusinessScopeHasSuffix(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeEqualFold applies the EqualFold predicate on the "business_scope" field.
func BusinessScopeEqualFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessScope), v))
	})
}

// BusinessScopeContainsFold applies the ContainsFold predicate on the "business_scope" field.
func BusinessScopeContainsFold(v string) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessScope), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.QccEnterpriseData) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.QccEnterpriseData) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QccEnterpriseData) predicate.QccEnterpriseData {
	return predicate.QccEnterpriseData(func(s *sql.Selector) {
		p(s.Not())
	})
}
