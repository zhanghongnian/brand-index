// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/zhanghongnian/brand-index/ent/qccenterprisedata"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeQccEnterpriseData = "QccEnterpriseData"
)

// QccEnterpriseDataMutation represents an operation that mutate the QccEnterpriseDataSlice
// nodes in the graph.
type QccEnterpriseDataMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	name                           *string
	register_status                *string
	legal_person                   *string
	registered_capital             *string
	set_up_date                    *string
	verify_date                    *string
	province                       *string
	city                           *string
	county                         *string
	phone                          *string
	other_phones                   *string
	email                          *string
	other_emails                   *string
	unified_social_credit_code     *string
	taxpayer_identification_number *string
	registration_number            *string
	organization_code              *string
	insurance_person_nums          *string
	enterprise_type                *string
	industry_involved              *string
	former_name                    *string
	website                        *string
	address                        *string
	business_scope                 *string
	clearedFields                  map[string]struct{}
	done                           bool
	oldValue                       func(context.Context) (*QccEnterpriseData, error)
}

var _ ent.Mutation = (*QccEnterpriseDataMutation)(nil)

// qccenterprisedataOption allows to manage the mutation configuration using functional options.
type qccenterprisedataOption func(*QccEnterpriseDataMutation)

// newQccEnterpriseDataMutation creates new mutation for $n.Name.
func newQccEnterpriseDataMutation(c config, op Op, opts ...qccenterprisedataOption) *QccEnterpriseDataMutation {
	m := &QccEnterpriseDataMutation{
		config:        c,
		op:            op,
		typ:           TypeQccEnterpriseData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQccEnterpriseDataID sets the id field of the mutation.
func withQccEnterpriseDataID(id int) qccenterprisedataOption {
	return func(m *QccEnterpriseDataMutation) {
		var (
			err   error
			once  sync.Once
			value *QccEnterpriseData
		)
		m.oldValue = func(ctx context.Context) (*QccEnterpriseData, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QccEnterpriseData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQccEnterpriseData sets the old QccEnterpriseData of the mutation.
func withQccEnterpriseData(node *QccEnterpriseData) qccenterprisedataOption {
	return func(m *QccEnterpriseDataMutation) {
		m.oldValue = func(context.Context) (*QccEnterpriseData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QccEnterpriseDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QccEnterpriseDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *QccEnterpriseDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *QccEnterpriseDataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *QccEnterpriseDataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *QccEnterpriseDataMutation) ResetName() {
	m.name = nil
}

// SetRegisterStatus sets the register_status field.
func (m *QccEnterpriseDataMutation) SetRegisterStatus(s string) {
	m.register_status = &s
}

// RegisterStatus returns the register_status value in the mutation.
func (m *QccEnterpriseDataMutation) RegisterStatus() (r string, exists bool) {
	v := m.register_status
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterStatus returns the old register_status value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldRegisterStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegisterStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegisterStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterStatus: %w", err)
	}
	return oldValue.RegisterStatus, nil
}

// ResetRegisterStatus reset all changes of the "register_status" field.
func (m *QccEnterpriseDataMutation) ResetRegisterStatus() {
	m.register_status = nil
}

// SetLegalPerson sets the legal_person field.
func (m *QccEnterpriseDataMutation) SetLegalPerson(s string) {
	m.legal_person = &s
}

// LegalPerson returns the legal_person value in the mutation.
func (m *QccEnterpriseDataMutation) LegalPerson() (r string, exists bool) {
	v := m.legal_person
	if v == nil {
		return
	}
	return *v, true
}

// OldLegalPerson returns the old legal_person value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldLegalPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLegalPerson is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLegalPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLegalPerson: %w", err)
	}
	return oldValue.LegalPerson, nil
}

// ResetLegalPerson reset all changes of the "legal_person" field.
func (m *QccEnterpriseDataMutation) ResetLegalPerson() {
	m.legal_person = nil
}

// SetRegisteredCapital sets the registered_capital field.
func (m *QccEnterpriseDataMutation) SetRegisteredCapital(s string) {
	m.registered_capital = &s
}

// RegisteredCapital returns the registered_capital value in the mutation.
func (m *QccEnterpriseDataMutation) RegisteredCapital() (r string, exists bool) {
	v := m.registered_capital
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisteredCapital returns the old registered_capital value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldRegisteredCapital(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegisteredCapital is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegisteredCapital requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisteredCapital: %w", err)
	}
	return oldValue.RegisteredCapital, nil
}

// ResetRegisteredCapital reset all changes of the "registered_capital" field.
func (m *QccEnterpriseDataMutation) ResetRegisteredCapital() {
	m.registered_capital = nil
}

// SetSetUpDate sets the set_up_date field.
func (m *QccEnterpriseDataMutation) SetSetUpDate(s string) {
	m.set_up_date = &s
}

// SetUpDate returns the set_up_date value in the mutation.
func (m *QccEnterpriseDataMutation) SetUpDate() (r string, exists bool) {
	v := m.set_up_date
	if v == nil {
		return
	}
	return *v, true
}

// OldSetUpDate returns the old set_up_date value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldSetUpDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSetUpDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSetUpDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSetUpDate: %w", err)
	}
	return oldValue.SetUpDate, nil
}

// ResetSetUpDate reset all changes of the "set_up_date" field.
func (m *QccEnterpriseDataMutation) ResetSetUpDate() {
	m.set_up_date = nil
}

// SetVerifyDate sets the verify_date field.
func (m *QccEnterpriseDataMutation) SetVerifyDate(s string) {
	m.verify_date = &s
}

// VerifyDate returns the verify_date value in the mutation.
func (m *QccEnterpriseDataMutation) VerifyDate() (r string, exists bool) {
	v := m.verify_date
	if v == nil {
		return
	}
	return *v, true
}

// OldVerifyDate returns the old verify_date value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldVerifyDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVerifyDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVerifyDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerifyDate: %w", err)
	}
	return oldValue.VerifyDate, nil
}

// ResetVerifyDate reset all changes of the "verify_date" field.
func (m *QccEnterpriseDataMutation) ResetVerifyDate() {
	m.verify_date = nil
}

// SetProvince sets the province field.
func (m *QccEnterpriseDataMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the province value in the mutation.
func (m *QccEnterpriseDataMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old province value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldProvince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProvince is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ResetProvince reset all changes of the "province" field.
func (m *QccEnterpriseDataMutation) ResetProvince() {
	m.province = nil
}

// SetCity sets the city field.
func (m *QccEnterpriseDataMutation) SetCity(s string) {
	m.city = &s
}

// City returns the city value in the mutation.
func (m *QccEnterpriseDataMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old city value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCity is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity reset all changes of the "city" field.
func (m *QccEnterpriseDataMutation) ResetCity() {
	m.city = nil
}

// SetCounty sets the county field.
func (m *QccEnterpriseDataMutation) SetCounty(s string) {
	m.county = &s
}

// County returns the county value in the mutation.
func (m *QccEnterpriseDataMutation) County() (r string, exists bool) {
	v := m.county
	if v == nil {
		return
	}
	return *v, true
}

// OldCounty returns the old county value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldCounty(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCounty is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCounty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounty: %w", err)
	}
	return oldValue.County, nil
}

// ResetCounty reset all changes of the "county" field.
func (m *QccEnterpriseDataMutation) ResetCounty() {
	m.county = nil
}

// SetPhone sets the phone field.
func (m *QccEnterpriseDataMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the phone value in the mutation.
func (m *QccEnterpriseDataMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old phone value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone reset all changes of the "phone" field.
func (m *QccEnterpriseDataMutation) ResetPhone() {
	m.phone = nil
}

// SetOtherPhones sets the other_phones field.
func (m *QccEnterpriseDataMutation) SetOtherPhones(s string) {
	m.other_phones = &s
}

// OtherPhones returns the other_phones value in the mutation.
func (m *QccEnterpriseDataMutation) OtherPhones() (r string, exists bool) {
	v := m.other_phones
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherPhones returns the old other_phones value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldOtherPhones(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOtherPhones is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOtherPhones requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherPhones: %w", err)
	}
	return oldValue.OtherPhones, nil
}

// ResetOtherPhones reset all changes of the "other_phones" field.
func (m *QccEnterpriseDataMutation) ResetOtherPhones() {
	m.other_phones = nil
}

// SetEmail sets the email field.
func (m *QccEnterpriseDataMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *QccEnterpriseDataMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *QccEnterpriseDataMutation) ResetEmail() {
	m.email = nil
}

// SetOtherEmails sets the other_emails field.
func (m *QccEnterpriseDataMutation) SetOtherEmails(s string) {
	m.other_emails = &s
}

// OtherEmails returns the other_emails value in the mutation.
func (m *QccEnterpriseDataMutation) OtherEmails() (r string, exists bool) {
	v := m.other_emails
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherEmails returns the old other_emails value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldOtherEmails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOtherEmails is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOtherEmails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherEmails: %w", err)
	}
	return oldValue.OtherEmails, nil
}

// ResetOtherEmails reset all changes of the "other_emails" field.
func (m *QccEnterpriseDataMutation) ResetOtherEmails() {
	m.other_emails = nil
}

// SetUnifiedSocialCreditCode sets the unified_social_credit_code field.
func (m *QccEnterpriseDataMutation) SetUnifiedSocialCreditCode(s string) {
	m.unified_social_credit_code = &s
}

// UnifiedSocialCreditCode returns the unified_social_credit_code value in the mutation.
func (m *QccEnterpriseDataMutation) UnifiedSocialCreditCode() (r string, exists bool) {
	v := m.unified_social_credit_code
	if v == nil {
		return
	}
	return *v, true
}

// OldUnifiedSocialCreditCode returns the old unified_social_credit_code value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldUnifiedSocialCreditCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnifiedSocialCreditCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnifiedSocialCreditCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnifiedSocialCreditCode: %w", err)
	}
	return oldValue.UnifiedSocialCreditCode, nil
}

// ResetUnifiedSocialCreditCode reset all changes of the "unified_social_credit_code" field.
func (m *QccEnterpriseDataMutation) ResetUnifiedSocialCreditCode() {
	m.unified_social_credit_code = nil
}

// SetTaxpayerIdentificationNumber sets the taxpayer_identification_number field.
func (m *QccEnterpriseDataMutation) SetTaxpayerIdentificationNumber(s string) {
	m.taxpayer_identification_number = &s
}

// TaxpayerIdentificationNumber returns the taxpayer_identification_number value in the mutation.
func (m *QccEnterpriseDataMutation) TaxpayerIdentificationNumber() (r string, exists bool) {
	v := m.taxpayer_identification_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxpayerIdentificationNumber returns the old taxpayer_identification_number value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldTaxpayerIdentificationNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaxpayerIdentificationNumber is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaxpayerIdentificationNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxpayerIdentificationNumber: %w", err)
	}
	return oldValue.TaxpayerIdentificationNumber, nil
}

// ResetTaxpayerIdentificationNumber reset all changes of the "taxpayer_identification_number" field.
func (m *QccEnterpriseDataMutation) ResetTaxpayerIdentificationNumber() {
	m.taxpayer_identification_number = nil
}

// SetRegistrationNumber sets the registration_number field.
func (m *QccEnterpriseDataMutation) SetRegistrationNumber(s string) {
	m.registration_number = &s
}

// RegistrationNumber returns the registration_number value in the mutation.
func (m *QccEnterpriseDataMutation) RegistrationNumber() (r string, exists bool) {
	v := m.registration_number
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationNumber returns the old registration_number value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldRegistrationNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegistrationNumber is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegistrationNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationNumber: %w", err)
	}
	return oldValue.RegistrationNumber, nil
}

// ResetRegistrationNumber reset all changes of the "registration_number" field.
func (m *QccEnterpriseDataMutation) ResetRegistrationNumber() {
	m.registration_number = nil
}

// SetOrganizationCode sets the organization_code field.
func (m *QccEnterpriseDataMutation) SetOrganizationCode(s string) {
	m.organization_code = &s
}

// OrganizationCode returns the organization_code value in the mutation.
func (m *QccEnterpriseDataMutation) OrganizationCode() (r string, exists bool) {
	v := m.organization_code
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationCode returns the old organization_code value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldOrganizationCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrganizationCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrganizationCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationCode: %w", err)
	}
	return oldValue.OrganizationCode, nil
}

// ResetOrganizationCode reset all changes of the "organization_code" field.
func (m *QccEnterpriseDataMutation) ResetOrganizationCode() {
	m.organization_code = nil
}

// SetInsurancePersonNums sets the insurance_person_nums field.
func (m *QccEnterpriseDataMutation) SetInsurancePersonNums(s string) {
	m.insurance_person_nums = &s
}

// InsurancePersonNums returns the insurance_person_nums value in the mutation.
func (m *QccEnterpriseDataMutation) InsurancePersonNums() (r string, exists bool) {
	v := m.insurance_person_nums
	if v == nil {
		return
	}
	return *v, true
}

// OldInsurancePersonNums returns the old insurance_person_nums value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldInsurancePersonNums(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInsurancePersonNums is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInsurancePersonNums requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsurancePersonNums: %w", err)
	}
	return oldValue.InsurancePersonNums, nil
}

// ResetInsurancePersonNums reset all changes of the "insurance_person_nums" field.
func (m *QccEnterpriseDataMutation) ResetInsurancePersonNums() {
	m.insurance_person_nums = nil
}

// SetEnterpriseType sets the enterprise_type field.
func (m *QccEnterpriseDataMutation) SetEnterpriseType(s string) {
	m.enterprise_type = &s
}

// EnterpriseType returns the enterprise_type value in the mutation.
func (m *QccEnterpriseDataMutation) EnterpriseType() (r string, exists bool) {
	v := m.enterprise_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEnterpriseType returns the old enterprise_type value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldEnterpriseType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnterpriseType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnterpriseType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnterpriseType: %w", err)
	}
	return oldValue.EnterpriseType, nil
}

// ResetEnterpriseType reset all changes of the "enterprise_type" field.
func (m *QccEnterpriseDataMutation) ResetEnterpriseType() {
	m.enterprise_type = nil
}

// SetIndustryInvolved sets the industry_involved field.
func (m *QccEnterpriseDataMutation) SetIndustryInvolved(s string) {
	m.industry_involved = &s
}

// IndustryInvolved returns the industry_involved value in the mutation.
func (m *QccEnterpriseDataMutation) IndustryInvolved() (r string, exists bool) {
	v := m.industry_involved
	if v == nil {
		return
	}
	return *v, true
}

// OldIndustryInvolved returns the old industry_involved value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldIndustryInvolved(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIndustryInvolved is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIndustryInvolved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndustryInvolved: %w", err)
	}
	return oldValue.IndustryInvolved, nil
}

// ResetIndustryInvolved reset all changes of the "industry_involved" field.
func (m *QccEnterpriseDataMutation) ResetIndustryInvolved() {
	m.industry_involved = nil
}

// SetFormerName sets the former_name field.
func (m *QccEnterpriseDataMutation) SetFormerName(s string) {
	m.former_name = &s
}

// FormerName returns the former_name value in the mutation.
func (m *QccEnterpriseDataMutation) FormerName() (r string, exists bool) {
	v := m.former_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFormerName returns the old former_name value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldFormerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFormerName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFormerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormerName: %w", err)
	}
	return oldValue.FormerName, nil
}

// ResetFormerName reset all changes of the "former_name" field.
func (m *QccEnterpriseDataMutation) ResetFormerName() {
	m.former_name = nil
}

// SetWebsite sets the website field.
func (m *QccEnterpriseDataMutation) SetWebsite(s string) {
	m.website = &s
}

// Website returns the website value in the mutation.
func (m *QccEnterpriseDataMutation) Website() (r string, exists bool) {
	v := m.website
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsite returns the old website value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldWebsite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWebsite is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWebsite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsite: %w", err)
	}
	return oldValue.Website, nil
}

// ResetWebsite reset all changes of the "website" field.
func (m *QccEnterpriseDataMutation) ResetWebsite() {
	m.website = nil
}

// SetAddress sets the address field.
func (m *QccEnterpriseDataMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the address value in the mutation.
func (m *QccEnterpriseDataMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old address value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress reset all changes of the "address" field.
func (m *QccEnterpriseDataMutation) ResetAddress() {
	m.address = nil
}

// SetBusinessScope sets the business_scope field.
func (m *QccEnterpriseDataMutation) SetBusinessScope(s string) {
	m.business_scope = &s
}

// BusinessScope returns the business_scope value in the mutation.
func (m *QccEnterpriseDataMutation) BusinessScope() (r string, exists bool) {
	v := m.business_scope
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessScope returns the old business_scope value of the QccEnterpriseData.
// If the QccEnterpriseData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QccEnterpriseDataMutation) OldBusinessScope(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBusinessScope is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBusinessScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessScope: %w", err)
	}
	return oldValue.BusinessScope, nil
}

// ResetBusinessScope reset all changes of the "business_scope" field.
func (m *QccEnterpriseDataMutation) ResetBusinessScope() {
	m.business_scope = nil
}

// Op returns the operation name.
func (m *QccEnterpriseDataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (QccEnterpriseData).
func (m *QccEnterpriseDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *QccEnterpriseDataMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.name != nil {
		fields = append(fields, qccenterprisedata.FieldName)
	}
	if m.register_status != nil {
		fields = append(fields, qccenterprisedata.FieldRegisterStatus)
	}
	if m.legal_person != nil {
		fields = append(fields, qccenterprisedata.FieldLegalPerson)
	}
	if m.registered_capital != nil {
		fields = append(fields, qccenterprisedata.FieldRegisteredCapital)
	}
	if m.set_up_date != nil {
		fields = append(fields, qccenterprisedata.FieldSetUpDate)
	}
	if m.verify_date != nil {
		fields = append(fields, qccenterprisedata.FieldVerifyDate)
	}
	if m.province != nil {
		fields = append(fields, qccenterprisedata.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, qccenterprisedata.FieldCity)
	}
	if m.county != nil {
		fields = append(fields, qccenterprisedata.FieldCounty)
	}
	if m.phone != nil {
		fields = append(fields, qccenterprisedata.FieldPhone)
	}
	if m.other_phones != nil {
		fields = append(fields, qccenterprisedata.FieldOtherPhones)
	}
	if m.email != nil {
		fields = append(fields, qccenterprisedata.FieldEmail)
	}
	if m.other_emails != nil {
		fields = append(fields, qccenterprisedata.FieldOtherEmails)
	}
	if m.unified_social_credit_code != nil {
		fields = append(fields, qccenterprisedata.FieldUnifiedSocialCreditCode)
	}
	if m.taxpayer_identification_number != nil {
		fields = append(fields, qccenterprisedata.FieldTaxpayerIdentificationNumber)
	}
	if m.registration_number != nil {
		fields = append(fields, qccenterprisedata.FieldRegistrationNumber)
	}
	if m.organization_code != nil {
		fields = append(fields, qccenterprisedata.FieldOrganizationCode)
	}
	if m.insurance_person_nums != nil {
		fields = append(fields, qccenterprisedata.FieldInsurancePersonNums)
	}
	if m.enterprise_type != nil {
		fields = append(fields, qccenterprisedata.FieldEnterpriseType)
	}
	if m.industry_involved != nil {
		fields = append(fields, qccenterprisedata.FieldIndustryInvolved)
	}
	if m.former_name != nil {
		fields = append(fields, qccenterprisedata.FieldFormerName)
	}
	if m.website != nil {
		fields = append(fields, qccenterprisedata.FieldWebsite)
	}
	if m.address != nil {
		fields = append(fields, qccenterprisedata.FieldAddress)
	}
	if m.business_scope != nil {
		fields = append(fields, qccenterprisedata.FieldBusinessScope)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *QccEnterpriseDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qccenterprisedata.FieldName:
		return m.Name()
	case qccenterprisedata.FieldRegisterStatus:
		return m.RegisterStatus()
	case qccenterprisedata.FieldLegalPerson:
		return m.LegalPerson()
	case qccenterprisedata.FieldRegisteredCapital:
		return m.RegisteredCapital()
	case qccenterprisedata.FieldSetUpDate:
		return m.SetUpDate()
	case qccenterprisedata.FieldVerifyDate:
		return m.VerifyDate()
	case qccenterprisedata.FieldProvince:
		return m.Province()
	case qccenterprisedata.FieldCity:
		return m.City()
	case qccenterprisedata.FieldCounty:
		return m.County()
	case qccenterprisedata.FieldPhone:
		return m.Phone()
	case qccenterprisedata.FieldOtherPhones:
		return m.OtherPhones()
	case qccenterprisedata.FieldEmail:
		return m.Email()
	case qccenterprisedata.FieldOtherEmails:
		return m.OtherEmails()
	case qccenterprisedata.FieldUnifiedSocialCreditCode:
		return m.UnifiedSocialCreditCode()
	case qccenterprisedata.FieldTaxpayerIdentificationNumber:
		return m.TaxpayerIdentificationNumber()
	case qccenterprisedata.FieldRegistrationNumber:
		return m.RegistrationNumber()
	case qccenterprisedata.FieldOrganizationCode:
		return m.OrganizationCode()
	case qccenterprisedata.FieldInsurancePersonNums:
		return m.InsurancePersonNums()
	case qccenterprisedata.FieldEnterpriseType:
		return m.EnterpriseType()
	case qccenterprisedata.FieldIndustryInvolved:
		return m.IndustryInvolved()
	case qccenterprisedata.FieldFormerName:
		return m.FormerName()
	case qccenterprisedata.FieldWebsite:
		return m.Website()
	case qccenterprisedata.FieldAddress:
		return m.Address()
	case qccenterprisedata.FieldBusinessScope:
		return m.BusinessScope()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *QccEnterpriseDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qccenterprisedata.FieldName:
		return m.OldName(ctx)
	case qccenterprisedata.FieldRegisterStatus:
		return m.OldRegisterStatus(ctx)
	case qccenterprisedata.FieldLegalPerson:
		return m.OldLegalPerson(ctx)
	case qccenterprisedata.FieldRegisteredCapital:
		return m.OldRegisteredCapital(ctx)
	case qccenterprisedata.FieldSetUpDate:
		return m.OldSetUpDate(ctx)
	case qccenterprisedata.FieldVerifyDate:
		return m.OldVerifyDate(ctx)
	case qccenterprisedata.FieldProvince:
		return m.OldProvince(ctx)
	case qccenterprisedata.FieldCity:
		return m.OldCity(ctx)
	case qccenterprisedata.FieldCounty:
		return m.OldCounty(ctx)
	case qccenterprisedata.FieldPhone:
		return m.OldPhone(ctx)
	case qccenterprisedata.FieldOtherPhones:
		return m.OldOtherPhones(ctx)
	case qccenterprisedata.FieldEmail:
		return m.OldEmail(ctx)
	case qccenterprisedata.FieldOtherEmails:
		return m.OldOtherEmails(ctx)
	case qccenterprisedata.FieldUnifiedSocialCreditCode:
		return m.OldUnifiedSocialCreditCode(ctx)
	case qccenterprisedata.FieldTaxpayerIdentificationNumber:
		return m.OldTaxpayerIdentificationNumber(ctx)
	case qccenterprisedata.FieldRegistrationNumber:
		return m.OldRegistrationNumber(ctx)
	case qccenterprisedata.FieldOrganizationCode:
		return m.OldOrganizationCode(ctx)
	case qccenterprisedata.FieldInsurancePersonNums:
		return m.OldInsurancePersonNums(ctx)
	case qccenterprisedata.FieldEnterpriseType:
		return m.OldEnterpriseType(ctx)
	case qccenterprisedata.FieldIndustryInvolved:
		return m.OldIndustryInvolved(ctx)
	case qccenterprisedata.FieldFormerName:
		return m.OldFormerName(ctx)
	case qccenterprisedata.FieldWebsite:
		return m.OldWebsite(ctx)
	case qccenterprisedata.FieldAddress:
		return m.OldAddress(ctx)
	case qccenterprisedata.FieldBusinessScope:
		return m.OldBusinessScope(ctx)
	}
	return nil, fmt.Errorf("unknown QccEnterpriseData field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *QccEnterpriseDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qccenterprisedata.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case qccenterprisedata.FieldRegisterStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterStatus(v)
		return nil
	case qccenterprisedata.FieldLegalPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLegalPerson(v)
		return nil
	case qccenterprisedata.FieldRegisteredCapital:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisteredCapital(v)
		return nil
	case qccenterprisedata.FieldSetUpDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSetUpDate(v)
		return nil
	case qccenterprisedata.FieldVerifyDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerifyDate(v)
		return nil
	case qccenterprisedata.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case qccenterprisedata.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case qccenterprisedata.FieldCounty:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounty(v)
		return nil
	case qccenterprisedata.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case qccenterprisedata.FieldOtherPhones:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherPhones(v)
		return nil
	case qccenterprisedata.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case qccenterprisedata.FieldOtherEmails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherEmails(v)
		return nil
	case qccenterprisedata.FieldUnifiedSocialCreditCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnifiedSocialCreditCode(v)
		return nil
	case qccenterprisedata.FieldTaxpayerIdentificationNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxpayerIdentificationNumber(v)
		return nil
	case qccenterprisedata.FieldRegistrationNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationNumber(v)
		return nil
	case qccenterprisedata.FieldOrganizationCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationCode(v)
		return nil
	case qccenterprisedata.FieldInsurancePersonNums:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsurancePersonNums(v)
		return nil
	case qccenterprisedata.FieldEnterpriseType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnterpriseType(v)
		return nil
	case qccenterprisedata.FieldIndustryInvolved:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndustryInvolved(v)
		return nil
	case qccenterprisedata.FieldFormerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormerName(v)
		return nil
	case qccenterprisedata.FieldWebsite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsite(v)
		return nil
	case qccenterprisedata.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case qccenterprisedata.FieldBusinessScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessScope(v)
		return nil
	}
	return fmt.Errorf("unknown QccEnterpriseData field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *QccEnterpriseDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *QccEnterpriseDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *QccEnterpriseDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QccEnterpriseData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *QccEnterpriseDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *QccEnterpriseDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *QccEnterpriseDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QccEnterpriseData nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *QccEnterpriseDataMutation) ResetField(name string) error {
	switch name {
	case qccenterprisedata.FieldName:
		m.ResetName()
		return nil
	case qccenterprisedata.FieldRegisterStatus:
		m.ResetRegisterStatus()
		return nil
	case qccenterprisedata.FieldLegalPerson:
		m.ResetLegalPerson()
		return nil
	case qccenterprisedata.FieldRegisteredCapital:
		m.ResetRegisteredCapital()
		return nil
	case qccenterprisedata.FieldSetUpDate:
		m.ResetSetUpDate()
		return nil
	case qccenterprisedata.FieldVerifyDate:
		m.ResetVerifyDate()
		return nil
	case qccenterprisedata.FieldProvince:
		m.ResetProvince()
		return nil
	case qccenterprisedata.FieldCity:
		m.ResetCity()
		return nil
	case qccenterprisedata.FieldCounty:
		m.ResetCounty()
		return nil
	case qccenterprisedata.FieldPhone:
		m.ResetPhone()
		return nil
	case qccenterprisedata.FieldOtherPhones:
		m.ResetOtherPhones()
		return nil
	case qccenterprisedata.FieldEmail:
		m.ResetEmail()
		return nil
	case qccenterprisedata.FieldOtherEmails:
		m.ResetOtherEmails()
		return nil
	case qccenterprisedata.FieldUnifiedSocialCreditCode:
		m.ResetUnifiedSocialCreditCode()
		return nil
	case qccenterprisedata.FieldTaxpayerIdentificationNumber:
		m.ResetTaxpayerIdentificationNumber()
		return nil
	case qccenterprisedata.FieldRegistrationNumber:
		m.ResetRegistrationNumber()
		return nil
	case qccenterprisedata.FieldOrganizationCode:
		m.ResetOrganizationCode()
		return nil
	case qccenterprisedata.FieldInsurancePersonNums:
		m.ResetInsurancePersonNums()
		return nil
	case qccenterprisedata.FieldEnterpriseType:
		m.ResetEnterpriseType()
		return nil
	case qccenterprisedata.FieldIndustryInvolved:
		m.ResetIndustryInvolved()
		return nil
	case qccenterprisedata.FieldFormerName:
		m.ResetFormerName()
		return nil
	case qccenterprisedata.FieldWebsite:
		m.ResetWebsite()
		return nil
	case qccenterprisedata.FieldAddress:
		m.ResetAddress()
		return nil
	case qccenterprisedata.FieldBusinessScope:
		m.ResetBusinessScope()
		return nil
	}
	return fmt.Errorf("unknown QccEnterpriseData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *QccEnterpriseDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *QccEnterpriseDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *QccEnterpriseDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *QccEnterpriseDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *QccEnterpriseDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *QccEnterpriseDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *QccEnterpriseDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown QccEnterpriseData unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *QccEnterpriseDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown QccEnterpriseData edge %s", name)
}
